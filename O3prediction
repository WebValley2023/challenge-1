{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 110,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "import plotly.express as px\n",
    "import plotly.graph_objects as go\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.metrics import r2_score\n",
    "\n",
    "from scipy.optimize import curve_fit"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 111,
   "metadata": {},
   "outputs": [],
   "source": [
    "df=pd.read_csv(\"Trento_Rovereto.csv\", na_values='n.d.')\n",
    "df[\"date\"] = pd.to_datetime(df[\"date\"])\n",
    "df.dropna(inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "df.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 112,
   "metadata": {},
   "outputs": [],
   "source": [
    "df.dropna(inplace=True)\n",
    "df['Ozone'] = pd.to_numeric(df['Ozone'])\n",
    "df=df.set_index(\"date\").resample(\"D\").mean(numeric_only=True).reset_index()\n",
    "df.dropna(inplace=True)\n",
    "train, test = train_test_split(df, test_size=0.2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "train"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "fig = plt.figure()\n",
    "\n",
    "df[\"date\"] = pd.to_datetime(df[\"date\"])\n",
    "df.sort_values(by=\"date\", inplace=True)\n",
    "df=df.set_index(\"date\", drop=True)\n",
    "#df.drop_duplicates(subset='date', inplace=True)\n",
    "df = df.resample(\"D\").mean()\n",
    "df_reduced = df.loc[df[\"O3\"]<=250]\n",
    "try:\n",
    "    sns.scatterplot(\n",
    "        data=df_reduced,\n",
    "        x='O3',\n",
    "        y='Temperature',\n",
    "        hue='Sol_Rad',\n",
    "        s=5\n",
    "    )\n",
    "    \n",
    "except:\n",
    "    print(\"errore\")\n",
    "\n",
    "print(fig)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "df.isna().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "df.loc[df[\"date\"]==str(pd.to_datetime(1.6707132e+18))]"
   ]
  },
  {
   "attachments": {},
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#DAY"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "##Example of curve fit\n",
    "#df=df.set_index(\"date\").resample(\"D\").mean().reset_index()\n",
    "\n",
    "##Define a model\n",
    "def f_model(x, a, b, c):\n",
    "    sol, temp=x\n",
    "    return a*sol+b*temp+c\n",
    "\n",
    "\n",
    "##df8 is an example of a dataframe, indexed with data and with columns name not really informative\n",
    "\n",
    "##You are training here from a start to end the slicing of a database\n",
    "popt, pcov = curve_fit( #popt are the optimal values, pcov is the covariance matrix of the optimized values.\n",
    "    f=f_model,       # model function\n",
    "    xdata=(train[\"Sol_rad\"].values, train[\"Temperature\"].values),\n",
    "       # x data\n",
    "    ydata=train[\"Ozone\"].values,   # y data\n",
    "    maxfev=100000    #Number of times in which you repeat the training, close to epochs\n",
    ")\n",
    "a_opt,b_opt, c_opt = popt\n",
    "Predictions_day = f_model((test[\"Sol_rad\"].values, test[\"Temperature\"].values),\n",
    "                        a_opt,\n",
    "                        b_opt,\n",
    "                        c_opt) #Here you are predicting the value of your complete samples"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "popt"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "plt.scatter( test[\"Ozone\"], Predictions_day, c = \"red\")\n",
    "plt.scatter(Predictions_day, Predictions_day)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "plt.scatter(test[\"Temperature\"], test[\"O3\"], c = \"red\")\n",
    "plt.scatter(test[\"Temperature\"], Predictions_day)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "r2_score(test[\"Ozone\"], Predictions_day)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "residuals=test[\"Ozone\"]- f_model((test[\"Sol_rad\"], test[\"Temperature\"]), *popt)\n",
    "ss_res=np.sum(residuals**2)\n",
    "ss_tot=np.sum((test[\"Ozone\"]-np.mean(test[\"Ozone\"]))**2)\n",
    "r_squared=1-(ss_res/ss_tot)\n",
    "r_squared"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "df[\"O3\"].corr(df[\"prediction\"])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "plt.scatter(df[\"O3\"].values, df[\"prediction\"].values)\n",
    "\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "df[\"Sol_rad\"].corr(df[\"\"])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "try:\n",
    "    sns.scatterplot(\n",
    "        data=df,\n",
    "        x='O3',\n",
    "        y='NO2',\n",
    "        #hue='VOC'\n",
    "    )\n",
    "except:\n",
    "    print(\"errore\")\n",
    "\n",
    "print(fig)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "##Example of curve fit\n",
    "\n",
    "df=df.set_index(\"date\").resample(\"M\").mean().reset_index()\n",
    "\n",
    "df.dropna(inplace=True)\n",
    "for col in df.columns:\n",
    "    if 'prediction_sol' in col:\n",
    "        del df[col]\n",
    "\n",
    "##Define a model\n",
    "def f_model_sol(x, a, c):\n",
    "    sol=x\n",
    "    return a*sol +c\n",
    "\n",
    "\n",
    "##df8 is an example of a dataframe, indexed with data and with columns name not really informative\n",
    "\n",
    "##You are training here from a start to end the slicing of a database\n",
    "popt, pcov = curve_fit( #popt are the optimal values, pcov is the covariance matrix of the optimized values.\n",
    "    f=f_model_sol,       # model function\n",
    "    xdata=(df[\"Sol_rad\"].values),\n",
    "       # x data\n",
    "    ydata=df[\"O3\"].values,   # y data\n",
    "    maxfev=100000    #Number of times in which you repeat the training, close to epochs\n",
    ")\n",
    "a_opt, c_opt = popt\n",
    "df[\"predictiction_sol\"] = f_model_sol((df[\"Sol_rad\"].values),\n",
    "                        a_opt,\n",
    "                        c_opt) #Here you are predicting the value of your complete samples"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "popt"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "df[\"O3\"].corr(df[\"predictiction_sol\"])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "##Example of curve fit\n",
    "df=df.set_index(\"date\").resample(\"M\").mean().reset_index()\n",
    "for col in df.columns:\n",
    "    if 'prediction_t' in col:\n",
    "        del df[col]\n",
    "df.dropna(inplace=True)\n",
    "##Define a model\n",
    "def f_model_temp(x, a, c):\n",
    "    sol=x\n",
    "    return a*sol +c\n",
    "\n",
    "\n",
    "##df8 is an example of a dataframe, indexed with data and with columns name not really informative\n",
    "\n",
    "##You are training here from a start to end the slicing of a database\n",
    "popt, pcov = curve_fit( #popt are the optimal values, pcov is the covariance matrix of the optimized values.\n",
    "    f=f_model_temp,       # model function\n",
    "    xdata=(df[\"Temperature\"].values),\n",
    "       # x data\n",
    "    ydata=df[\"O3\"].values,   # y data\n",
    "    maxfev=100000    #Number of times in which you repeat the training, close to epochs\n",
    ")\n",
    "a_opt, c_opt = popt\n",
    "df[\"prediction_t\"] = f_model_temp((df[\"Temperature\"].values),\n",
    "                        a_opt,\n",
    "                        c_opt) #Here you are predicting the value of your complete samples"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "df[\"O3\"].corr(df[\"prediction_t\"])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "for col in df.columns:\n",
    "    if 'prediction_t' in col:\n",
    "        del df[col]\n",
    "for col in df.columns:\n",
    "    if 'prediction' in col:\n",
    "        del df[col]\n",
    "for col in df.columns:\n",
    "    if 'predictiction' in col:\n",
    "        del df[col]\n",
    "for col in df.columns:\n",
    "    if 'predictiction_sol' in col:\n",
    "        del df[col]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 113,
   "metadata": {},
   "outputs": [],
   "source": [
    "##Example of curve fit\n",
    "#df=df.set_index(\"date\").resample(\"M\").mean().reset_index()\n",
    "#df.dropna(inplace=True)\n",
    "##Define a model\n",
    "def f_model_no2(x, a, b, c, d):\n",
    "    sol, temp, no2=x\n",
    "    return a*sol+b*temp+no2*c+d\n",
    "\n",
    "\n",
    "##df8 is an example of a dataframe, indexed with data and with columns name not really informative\n",
    "\n",
    "##You are training here from a start to end the slicing of a database\n",
    "popt, pcov = curve_fit( #popt are the optimal values, pcov is the covariance matrix of the optimized values.\n",
    "    f=f_model_no2,       # model function\n",
    "    xdata=(train[\"Sol_rad\"].values, train[\"Temperature\"].values, train[\"Nitrogen dioxide\"].values),\n",
    "       # x data\n",
    "    ydata=train[\"Ozone\"].values,   # y data\n",
    "    maxfev=100000    #Number of times in which you repeat the training, close to epochs\n",
    ")\n",
    "a_opt,b_opt, c_opt, d_opt = popt\n",
    "Predictions_day = f_model_no2((test[\"Sol_rad\"].values, test[\"Temperature\"].values, test[\"Nitrogen dioxide\"].values),\n",
    "                        a_opt,\n",
    "                        b_opt,\n",
    "                        c_opt,\n",
    "                        d_opt) #Here you are predicting the value of your complete samples"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 114,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.7502665167286795"
      ]
     },
     "execution_count": 114,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "residuals=test[\"Ozone\"]- f_model_no2((test[\"Sol_rad\"], test[\"Temperature\"], test[\"Nitrogen dioxide\"]), *popt)\n",
    "ss_res=np.sum(residuals**2)\n",
    "ss_tot=np.sum((test[\"Ozone\"]-np.mean(test[\"Ozone\"]))**2)\n",
    "r_squared=1-(ss_res/ss_tot)\n",
    "r_squared"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 115,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([ 0.16913504,  1.1355462 , -0.57542234, 28.87246923])"
      ]
     },
     "execution_count": 115,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "popt"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "df[\"O3\"].corr(df[\"prediction\"])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 105,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.collections.PathCollection at 0x7fbf38213a90>"
      ]
     },
     "execution_count": 105,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.scatter( test[\"Ozone\"], Predictions_day, c = \"red\")\n",
    "plt.scatter(Predictions_day, Predictions_day)"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": ".venv",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.6"
  },
  "orig_nbformat": 4
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
